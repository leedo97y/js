var isValid = function (s) {
	let stack = [], ch, i;
	for (i = 0; i < s.length; i++) {
		ch = s.charAt(i);

		/*
		Check push conditions
		*/
		if (ch == '(' || ch == '[' || ch == '{') {
			stack.push(ch);
		}
		else {
			switch (ch) {
				/*
				Check pop conditions 
				*/
				case ')':
					/*
					notEqual to '('
					*/
					if (stack.pop() != '(') {
						return false;
					}
					break;
				/*
				notEqual to '['
				*/
				case ']':
					if (stack.pop() != '[') {
						return false;
					}
					break;
				/*
				notEqual to '}'
				*/
				case '}':
					if (stack.pop() != '{') {
						return false;
					}
					break;
			}
		}
	}

	/*
	check the whether is empty or not
	*/
	return stack.length > 0 ? false : true;
}


// Conditions
// 1. Open brackets must be closed by the same type of brackets.  ==> []{}() / {} / [] / () ...
// 2. Open brackets must be closed in the correct order. ==> [{}] / ({[]}) ...

// Input : s = "()"
// Output : true

// s = "()[]{}"
// true

// s = "(]"
// false

// s = "{[]}"
// true



var isValid = function(b) {
	var stack = [];
	for (var i = 0; i < b.length; i++) {
			if (b[i] === '(' || b[i] === '[' || b[i] === '{') {
					stack.push(b[i]);
			} else if (
					(b[i].length > 0 &&
							b[i] === ')' &&
							stack[stack.length - 1] === '(') ||
					(b[i] === ']' && stack[stack.length - 1] === '[') ||
					(b[i] === '}' && stack[stack.length - 1] === '{')
			) {
					stack.pop();
			} else {
					return false;
			}
	}
	return stack.length === 0;
}